<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>页面未找到 - 404</title>
    <link rel="icon"
        href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>🦊</text></svg>">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #c8f5f5 0%, #a8e6e6 25%, #88d7d7 50%, #68c8c8 75%, #48b9b9 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            font-family: "Comic Sans MS", "Microsoft YaHei", sans-serif;
            color: #444;
            position: relative;
            overflow: hidden;
        }

        /* 背景动画元素 */
        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .floating-element {
            position: absolute;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

        .floating-element:nth-child(1) {
            width: 60px;
            height: 60px;
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .floating-element:nth-child(2) {
            width: 40px;
            height: 40px;
            top: 20%;
            right: 15%;
            animation-delay: 1s;
        }

        .floating-element:nth-child(3) {
            width: 80px;
            height: 80px;
            bottom: 15%;
            left: 15%;
            animation-delay: 2s;
        }

        .floating-element:nth-child(4) {
            width: 50px;
            height: 50px;
            bottom: 25%;
            right: 10%;
            animation-delay: 3s;
        }

        @keyframes float {

            0%,
            100% {
                transform: translateY(0) rotate(0deg);
            }

            50% {
                transform: translateY(-20px) rotate(180deg);
            }
        }

        .fox-container {
            position: relative;
            z-index: 2;
        }

        .fox {
            font-size: 140px;
            animation: bounce 0.8s infinite alternate, glow 2s ease-in-out infinite alternate;
            filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .fox:hover {
            transform: scale(1.1) rotate(5deg);
        }

        @keyframes bounce {
            from {
                transform: translateY(0);
            }

            to {
                transform: translateY(-15px);
            }
        }

        @keyframes glow {
            from {
                filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
            }

            to {
                filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
            }
        }

        
    </style>

<script>
(function() {
    'use strict';
    
    var devToolsOpened = false;
    var checkInterval = null;
    
    // 检测开发者工具是否开启的多种方法
    function detectDevTools() {
        var widthThreshold = window.outerWidth - window.innerWidth > 160;
        var heightThreshold = window.outerHeight - window.innerHeight > 160;
        
        // 方法1: 窗口大小差异检测
        if (widthThreshold || heightThreshold) {
            return true;
        }
        
        // 方法2: 调试器检测
        var start = performance.now();
        debugger;
        var end = performance.now();
        if (end - start > 100) {
            return true;
        }
        
        // 方法3: 控制台检测
        var element = new Image();
        Object.defineProperty(element, 'id', {
            get: function() {
                return true;
            }
        });
        console.log(element);
        
        // 方法4: 性能监测
        var perfData = window.performance.memory;
        if (perfData && perfData.usedJSHeapSize > 100000000) { // 100MB
            return true;
        }
        
        return false;
    }
    
    // 关闭开发者工具的方法
    function closeDevTools() {
        try {
            // 方法1: 触发窗口调整（可能关闭开发者工具）
            window.resizeTo(window.screen.availWidth, window.screen.availHeight);
            
            // 方法2: 尝试 blur 和 focus
            window.blur();
            window.focus();
            
            // 方法3: 打开新窗口并关闭当前（激进方法）
            // var newWindow = window.open(window.location.href, '_self');
            // if (newWindow) {
            //     window.close();
            // }
            
            // 方法4: 重载页面
            // window.location.reload();
            
        } catch(e) {
            // 静默处理错误
        }
    }
    
    // 强制关闭开发者工具
    function forceCloseDevTools() {
        if (detectDevTools()) {
            devToolsOpened = true;
            console.log('开发者工具已检测到，正在尝试关闭...');
            closeDevTools();
            
            // 如果检测到多次，采取更激进的措施
            setTimeout(function() {
                if (detectDevTools()) {
                    console.log('开发者工具仍然开启，尝试重载页面...');
                    window.location.reload();
                }
            }, 1000);
        }
    }
    
    // 按键阻止
    function blockShortcuts(e) {
        var blockedKeys = [
            {key: 'F12', ctrl: false, shift: false},
            {key: 'I', ctrl: true, shift: true},
            {key: 'J', ctrl: true, shift: true}, 
            {key: 'C', ctrl: true, shift: true},
            {key: 'U', ctrl: true, shift: false},
            {key: 'S', ctrl: true, shift: true} // Ctrl+Shift+S
        ];
        
        for (var i = 0; i < blockedKeys.length; i++) {
            var shortcut = blockedKeys[i];
            if (e.key === shortcut.key && 
                e.ctrlKey === shortcut.ctrl && 
                e.shiftKey === shortcut.shift) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                
                // 立即检测并尝试关闭开发者工具
                setTimeout(forceCloseDevTools, 100);
                return false;
            }
        }
        
        // 单独检测 F12
        if (e.key === 'F12') {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            setTimeout(forceCloseDevTools, 100);
            return false;
        }
        
        return true;
    }
    
    // 右键阻止
    function blockContextMenu(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
    
    // 定期检测函数
    function periodicCheck() {
        if (detectDevTools()) {
            console.log('定期检测：发现开发者工具已开启');
            forceCloseDevTools();
        }
    }
    
    // 初始化保护
    function initProtection() {
        // 立即检测一次
        setTimeout(function() {
            forceCloseDevTools();
        }, 500);
        
        // 每5秒定期检测
        checkInterval = setInterval(periodicCheck, 5000);
        
        // 添加事件监听
        document.addEventListener('keydown', blockShortcuts, true);
        document.addEventListener('contextmenu', blockContextMenu, true);
        
        // 监听窗口大小变化（开发者工具可能改变窗口）
        var lastWidth = window.innerWidth;
        var lastHeight = window.innerHeight;
        
        window.addEventListener('resize', function() {
            var widthDiff = Math.abs(window.innerWidth - lastWidth);
            var heightDiff = Math.abs(window.innerHeight - lastHeight);
            
            if (widthDiff > 100 || heightDiff > 100) {
                setTimeout(forceCloseDevTools, 300);
            }
            
            lastWidth = window.innerWidth;
            lastHeight = window.innerHeight;
        });
        
        // 监听页面可见性变化
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                setTimeout(forceCloseDevTools, 1000);
            }
        });
        
        // 控制台干扰
        if (window.console) {
            var methods = ['log', 'warn', 'error', 'info', 'debug', 'clear'];
            methods.forEach(function(method) {
                if (console[method]) {
                    var original = console[method];
                    console[method] = function() {
                        // 记录到后台（可选）
                        // logToServer('Console used: ' + method, arguments);
                        
                        try {
                            original.apply(console, arguments);
                        } catch(e) {
                            // 静默失败
                        }
                    };
                }
            });
            
            // 重写 console 对象本身
            Object.defineProperty(window, 'console', {
                value: console,
                writable: false,
                configurable: false
            });
        }
        
        // 防止在新窗口打开开发者工具
        window.open = function() {
            return null;
        };
    }
    
    // 页面加载完成后初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initProtection);
    } else {
        initProtection();
    }
    
    // 提供清理函数（可选）
    window.disableAntiDevTools = function() {
        if (checkInterval) {
            clearInterval(checkInterval);
        }
        document.removeEventListener('keydown', blockShortcuts, true);
        document.removeEventListener('contextmenu', blockContextMenu, true);
    };
    
})();
</script>
</head>
<body>
    <div class="fox">🦊</div>
    <div class="error-box">
        <div class="error-icon" style="text-align: center;font-size: large;"></div>
        <h2>页面未找到 - 404</h2>
    </div>
</body>
</html>